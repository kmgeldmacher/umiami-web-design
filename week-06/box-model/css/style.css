img {

  /* We are setting the width, height just for this example */
  width: 600px;
  height: 400px;

  /* We are giving the image a margin of 2em (the size of two 'M'). In
     This case, we are specifying the margins individually. */

  margin-top: 2em;
  margin-right: 2em;
  margin-bottom: 2em;
  margin-left: 2em;

  /* Why listed in this order? If we want to do this in 'shorthand' 
     these are how the properties are applied: 

     margin: 2em 2em 2em 2em;

     Top, right, bottom left -- clockwise!

     What if our vertical margins were the same and our horizontal
     margins were different?  For instance: 

     margin-top: 2em;
     margin-right: 1em;
     margin-bottom: 2em;
     margin-left: 1em;

     We can write this in shorthand... 

     margin: 2em 1em;

     ... and the browser will repeat the property values for us
     automatically!

     What if we had the same margin for all sides? We can write that in
     shorthand, too!
  
     margin: 2em; 

  */

  /* Let's apply padding to our image! */

  padding-top: 2em;
  padding-right: 2em;
  padding-bottom: 2em;
  padding-left: 2em;

  /* Guess what is neat about the padding and margin properties? The
     values can be applied in the same way. So everything covered in
     the example above applies to padding as well. You just need to
     specify padding in your declaration.

     For instance: 

     padding-top: 2em;
     padding-right: 1em;
     padding-bottom: 2em;
     padding-left: 1em;

     Or...

     padding: 2em 1em;

     Or, if you have one value for all sides...

     padding: 1em; 

  */



  /* This is a little out of order, but now, let's apply a border. */

  border-top-width: 2px;
  border-right-width: 2px;
  border-bottom-width: 2px;
  border-left-width: 2px;

  border-top-style: solid;
  border-right-style: solid;
  border-bottom-style: solid;
  border-left-style: solid;

  border-top-color: #ccc;
  border-right-color: #ccc;
  border-bottom-color: #ccc;
  border-left-color: #ccc;


  /* Wow. That was a real pain to type out. There has to be a better
     way right? We can use shorthand for the border property, too. But
     it is a little more detailed than padding and margin because we
     have to specify three values: width, style, color (and in that 
     specific order).
 
     border-top: 2px solid #ccc;
     border-right: 2px solid #ccc;
     border-bottom: 2px solid #ccc;
     border-left: 2px solid #ccc;

     That is a lot better. And helpful if, perhaps, we only want to 
     apply a border to one side of an element. Maybe instead of using
     an hr, we can just apply a border to the bottom of an element
     like section.

     But we're working with an image here, and images look very nice
     when framed, right? Do we really have to write four lines to put
     a border around an entire image?

     No. There's shorthand for that!

     border: 2px solid #ccc;

  */

  /* We can also apply the CSS3 property, border-radius, which gives us
     curved corners.

     (Because this still requires vendor prefixes you can cheat here and
     use an online generator to help you: http://border-radius.com/.)

     -webkit-border-radius: 20px;
     -moz-border-radius: 20px;
     border-radius: 20px;
  */

}

/* Want to see some real CSS trickery? */

div {

  width: 400px;
  height: 400px;

  background: url(../img/earth.jpg) no-repeat;

  -webkit-border-radius: 50%;
  -moz-border-radius: 50%;
  border-radius: 50%;

  border: 1px solid #ccc;
  margin: 1em;
  padding: 0;
}

div p {
  color: #fff;
  font-family: "Helvetica Neue," sans-serif;
  font-size: 36px;
  text-align: center;
  margin-top: 182px;
}

/* How do we vertically center the text? It requires a little math:

  (height - font size) / 2

  Or in this case: (400 - 36) / 2 = 182px;

*/
